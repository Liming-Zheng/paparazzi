#!/usr/bin/env python

# Tool to convert hex log dumps generated by onboard_logger.c on vehicle into text format matching the rest of paparazzi

import socket
import struct
import os
import logging
import sys
import threading
import string

sys.path.append(os.getenv("PAPARAZZI_HOME") + "/sw/lib/python")

import messages_xml_map

class OnboardLogTransformTool():
    def __init__(self):
      messages_xml_map.ParseMessages()

    def ProcessLine(self, line):
      fields = line.strip().split(' ')
      [timestamp, ac_id, msg_id] = fields[0:3]
      data_fields = map(lambda x: chr(int(x, 16)), fields[4:])
      ac_id = int(ac_id)
      timestamp = float(timestamp)
      msg_id = int(msg_id)

      msg_name = messages_xml_map.message_dictionary_id_name[msg_id]
      msg_fields = messages_xml_map.message_dictionary_types[msg_id]

      print timestamp, ac_id, msg_name, 

      field_offset = 0
      for field in msg_fields:
	if field == "float":
	  value = struct.unpack('f', "".join(data_fields[field_offset:field_offset + 4]))[0]
	  print value, 
	  field_offset = field_offset + 4
	elif field == "uint8":
	  value = struct.unpack('B', "".join(data_fields[field_offset:field_offset + 1]))[0]
	  print value, 
	  field_offset = field_offset + 1
	elif field == "uint16":
	  value = struct.unpack('H', "".join(data_fields[field_offset:field_offset + 2]))[0]
	  print value, 
	  field_offset = field_offset + 2
	elif field == "uint32":
	  value = struct.unpack('L', "".join(data_fields[field_offset:field_offset + 4]))[0]
	  print value, 
	  field_offset = field_offset + 4
	elif field == "int8":
	  value = struct.unpack('b', "".join(data_fields[field_offset:field_offset + 1]))[0]
	  print value,
	  field_offset = field_offset + 1
	elif field == "int16":
	  value = struct.unpack('h', "".join(data_fields[field_offset:field_offset + 2]))[0]
	  print value, 
	  field_offset = field_offset + 2
	elif field == "int32":
	  value = struct.unpack('l', "".join(data_fields[field_offset:field_offset + 4]))[0]
	  print value, 
	  field_offset = field_offset + 4
	elif field == "uint8[]":
	  value = struct.unpack('B', "".join(data_fields[field_offset:field_offset + 1]))[0]
	  field_offset = field_offset + 1
	  for count in range(0, value):
	    array_value = struct.unpack('B', "".join(data_fields[field_offset:field_offset + 1]))[0]
	    field_offset = field_offset + 1
	    print array_value, 
	elif field == "int16[]":
	  value = struct.unpack('B', "".join(data_fields[field_offset:field_offset + 1]))[0]
	  field_offset = field_offset + 1
	  for count in range(0, value):
	    array_value = struct.unpack('h', "".join(data_fields[field_offset:field_offset + 2]))[0]
	    field_offset = field_offset + 2
	    print array_value, 
	elif field == "uint16[]":
	  value = struct.unpack('B', "".join(data_fields[field_offset:field_offset + 1]))[0]
	  field_offset = field_offset + 1
	  for count in range(0, value):
	    array_value = struct.unpack('H', "".join(data_fields[field_offset:field_offset + 2]))[0]
	    field_offset = field_offset + 2
	    print array_value, 
	else:
	  print "unknown field type %s" % field

	if (field_offset + 1 >= len(data_fields)):
	  break

      print ""

    def Run(self, logfile):
      # open log file
      INPUT = open(logfile, "r")
      for line in INPUT:
	try:
	  self.ProcessLine(line)
	except:
	  pass
      INPUT.close()

def main():
  log_transform = OnboardLogTransformTool()
  log_transform.Run(sys.argv[1])

if __name__ == '__main__':
  main()
